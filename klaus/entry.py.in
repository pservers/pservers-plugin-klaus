#!/usr/bin/python3
# -*- coding: utf-8; tab-width: 4; indent-tabs-mode: t -*-

import re
from base64 import b64decode
from klaus.contrib.wsgi_autoreloading import make_autoreloading_app


#
# Clients with git-smart-http read priviledge:
#   1. no-auth
#   2. http-basic-auth user "ro"
#   3. http-basic-auth user "rw"
# Clients with git-smart-http write priviledge:
#   1. http-basic-auth user "rw"
#
class MyAuthMiddleWare:

    def __init__(self, wsgi_app):
        self.wsgi_app = wsgi_app

        self.realm = "klaus"
        self.roUsername = "ro"
        self.rwUsername = "rw"

        # from https://stackoverflow.com/questions/26734933/how-to-set-up-git-over-http
        # from https://stackoverflow.com/questions/34387868/setup-git-over-http-https-with-apache-2-4-server
        self.gitUrlPattern = r"(?x)^/(.*/(HEAD|info/refs|objects/(info/[^/]+|[0-9a-f]{2}/[0-9a-f]{38}|pack/pack-[0-9a-f]{40}\.(pack|idx))|git-(upload|receive)-pack))$"
        self.gitUrlPattern = re.compile(self.gitUrlPattern)

        # from https://github.com/jonashaag/klaus/blob/master/klaus/__init__.py
        self.gitPushUrlPattern = r"^/(~[^/]+/)?[^/]+/(info/refs\?service=git-receive-pack|git-receive-pack)$"
        self.gitPushUrlPattern = re.compile(self.gitPushUrlPattern)

    def __call__(self, environ, start_response):
        url = self._reconstruct_uri(environ)
        if self.gitPushUrlPattern.match(url):
            if "HTTP_AUTHORIZATION" in environ:
                if self._get_username(environ["HTTP_AUTHORIZATION"]) == self.rwUsername:
                    # permit, wave-through to real WSGI app.
                    return self.wsgi_app(environ, start_response)
                else:
                    # deny, response with 401 error
                    return self._need_login(environ, start_response)
            else:
                # no auth header, deny
                return self._need_login(environ, start_response)
        elif self.gitUrlPattern.match(url):
            if "HTTP_AUTHORIZATION" in environ:
                if self._get_username(environ["HTTP_AUTHORIZATION"]) in [self.roUsername, self.rwUsername]:
                    # permit
                    return self.wsgi_app(environ, start_response)
                else:
                    # deny
                    return self._need_login(environ, start_response)
            else:
                # no auth header, permit
                return self.wsgi_app(environ, start_response)
        else:
            # permit
            return self.wsgi_app(environ, start_response)

    def _reconstruct_uri(self, environ):
        """
        Reconstruct the relative part of the request URI. I.e. if the requested URL
        is https://foo.bar/spam?eggs, ``reconstruct_uri`` returns ``'/spam?eggs'``.
        """
        uri = environ.get('SCRIPT_NAME', '') + environ['PATH_INFO']
        if environ.get('QUERY_STRING'):
            uri += '?' + environ['QUERY_STRING']
        return uri

    def _get_username(self, header):
        _, encoded = header.split(None, 1)
        decoded = b64decode(encoded).decode('UTF-8')
        username, password = decoded.split(':', 1)
        return username

    def _need_login(self, environ, start_response):
        start_response(
            '401 Authentication Required',
            [('WWW-Authenticate', 'Basic realm="%s"' % (self.realm))],
        )
        html = '<h1>401 - Authentication Required</h1>'
        return [html.encode()]


application = make_autoreloading_app("%%DATA_DIR%%", "%%SERVER_ID%%", use_smarthttp=True, require_browser_auth=True)
application = MyAuthMiddleWare(application)
